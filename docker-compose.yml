services:
  redis:
    image: redis:7-alpine
    restart: always
    networks: [esign]

  backend:
    build: ./backend
    restart: always
    env_file: ./backend/.env
    depends_on: [redis]
    # Partage des fichiers générés/consommés
    volumes:
      - ./backend/media:/app/media
      - ./backend/certs:/app/certs:ro
    networks: [esign]

  celery-worker:
    build: ./backend
    restart: always
    env_file: ./backend/.env
    command: celery -A esign worker --loglevel=info
    depends_on: [backend, redis]
    # IMPORTANT: mêmes volumes que le backend
    volumes:
      - ./backend/media:/app/media
      - ./backend/certs:/app/certs:ro
    networks: [esign]

  celery-beat:
    build: ./backend
    restart: always
    env_file: ./backend/.env
    command: celery -A esign beat --loglevel=info
    depends_on: [backend, redis]
    volumes:
      - ./backend/media:/app/media
      - ./backend/certs:/app/certs:ro
    networks: [esign]

  # Reverse proxy HTTPS (Let’s Encrypt auto)
  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [backend]
    networks: [esign]

volumes:
  caddy_data:
  caddy_config:

networks:
  esign:
    driver: bridge
